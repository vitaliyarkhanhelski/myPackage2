name: Build the Unlocked Package

on:
  release:
    types: [published]

jobs:
  hello-world:
    runs-on: ubuntu-latest

    steps:
      - name: Install Salesforce CLI
        run: |
          node --version
          npm install @salesforce/cli --global
          sf update stable
          sf version
          sf plugins
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Say Hello
        run: echo "Hello World ðŸŽ‰ The release event worked!"

      - name: "Authenticate Salesforce Dev Hub org"
        run: |
          echo "${{ secrets.DEVHUB_CERT_KEY }}" > server.key
          sf org login jwt \
            --client-id 3MVG9PwZx9R6_Urce3.53_goaHf7kmL8zRlPSyLmewCZ.j1L2jNdje9ei0PG_eKnhmivFhGKcGduQ2JXgHszT \
            --username vitaliyarkhanhelski@curious-impala-7guxhs.com \
            --jwt-key-file server.key \
            --set-default-dev-hub \
            --instance-url https://login.salesforce.com \
            --alias myOrg
          sf config get target-dev-hub

      - name: "Query 5 Accounts"
        run: |
          sf data query --query "SELECT Id, Name FROM Account LIMIT 5" --target-org myOrg

      - name: "Create package version"
        id: create_package_version
        run: |
          sf package version create \
            --package "MyPackageBuild" \
            --code-coverage \
            --version-number "${{ github.event.release.tag_name }}.1" \
            --version-name "ver ${{ github.event.release.tag_name }}" \
            --installation-key vit667 \
            --json > version_run.json
          
#         Display the contents of the file in the terminal
          cat version_run.json
#         Read file and extract the value of result.Id in the shell variable RUN_ID
          RUN_ID=$(jq -r '.result.Id' version_run.json)
#         Write the variable to a special file ($GITHUB_ENV) used in GitHub Actions, making it available to later steps in the workflow
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
               
#         Safety check to ensure that RUN_ID was retrieved successfully
          if [[ "$RUN_ID" == "null" || -z "$RUN_ID" ]]; then
            echo "Failed to retrieve RUN_ID!"
            exit 1
          fi

#       Validate every 30 sec if the package version creation is completed
      - name: Poll package version creation status
        id: poll-package
        run: |
          while true; do
            sleep 30
            STATUS_JSON=$(sf package version create report --package-create-request-id ${{ env.RUN_ID }} --json)
            STATUS=$(echo "$STATUS_JSON" | jq -r '.result[0].Status' 2>/dev/null)

            if [[ "$STATUS" == "Success" ]]; then
              echo "Package created successfully!"
              break
            elif [[ "$STATUS" == "Error" ]]; then
              echo "Package creation failed!"
              echo "$STATUS_JSON"
              exit 1
            else
              echo "Current status: $STATUS. Polling again..."
            fi
          done

#       Display the result of status report of a package version creation request
      - name: Display package version info
        run: |
          sf package version create report --package-create-request-id ${{ env.RUN_ID }} --json | jq '.result'
          
          
#          sf package version create report --package-create-request-id 08cWU0000002MAvYAM"